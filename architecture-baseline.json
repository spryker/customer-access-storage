[
    {
        "fileName": "src/Spryker/Client/CustomerAccessStorage/Dependency/Client/CustomerAccessStorageToStorageClientBridge.php",
        "description": "Bridges: Type should be defined for param `key` in method `Spryker\\Client\\CustomerAccessStorage\\Dependency\\Client\\CustomerAccessStorageToStorageClientBridge::get()`.",
        "rule": "BridgeMethodsRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Client/CustomerAccessStorage/Dependency/Service/CustomerAccessStorageToSynchronizationServiceBridge.php",
        "description": "Bridges: Type should be defined for param `resourceName` in method `Spryker\\Client\\CustomerAccessStorage\\Dependency\\Service\\CustomerAccessStorageToSynchronizationServiceBridge::getStorageKeyBuilder()`.",
        "rule": "BridgeMethodsRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Client/CustomerAccessStorage/Dependency/Service/CustomerAccessStorageToSynchronizationServiceInterface.php",
        "description": "Bridges: The bridge interface has incorrect method signature for `getStorageKeyBuilder()`. Missed return type. That violates the rule \"All bridge interface methods must have exactly the same or more strict signature as their parent\"",
        "rule": "BridgeMethodsInterfaceRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Zed/CustomerAccessStorage/Dependency/Facade/CustomerAccessStorageToEventBehaviorFacadeBridge.php",
        "description": "Bridges: Method `getEventTransferIds()` must have `public function get<DomainEntity>Collection(<DomainEntity>CriteriaTransfer): <DomainEntity>CollectionTransfer;` signature.",
        "rule": "BridgeFacadeMethodsRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Zed/CustomerAccessStorage/Dependency/Facade/CustomerAccessStorageToEventBehaviorFacadeBridge.php",
        "description": "Bridges: Type should be defined for param `foreignKeyColumnName` in method `Spryker\\Zed\\CustomerAccessStorage\\Dependency\\Facade\\CustomerAccessStorageToEventBehaviorFacadeBridge::getEventTransferForeignKeys()`.",
        "rule": "BridgeMethodsRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Zed/CustomerAccessStorage/Dependency/Facade/CustomerAccessStorageToEventBehaviorFacadeBridge.php",
        "description": "Bridges: Method `getEventTransferForeignKeys()` must have `public function get<DomainEntity>Collection(<DomainEntity>CriteriaTransfer): <DomainEntity>CollectionTransfer;` signature.",
        "rule": "BridgeFacadeMethodsRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Zed/CustomerAccessStorage/Dependency/Facade/CustomerAccessStorageToEventBehaviorInterface.php",
        "description": "Bridges: The bridge interface has incorrect method signature for `getEventTransferIds()`. Missed return type. That violates the rule \"All bridge interface methods must have exactly the same or more strict signature as their parent\"",
        "rule": "BridgeMethodsInterfaceRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Zed/CustomerAccessStorage/Dependency/Facade/CustomerAccessStorageToEventBehaviorInterface.php",
        "description": "Bridges: The bridge interface has incorrect method signature for `getEventTransferForeignKeys()`. Missed return type. That violates the rule \"All bridge interface methods must have exactly the same or more strict signature as their parent\"",
        "rule": "BridgeMethodsInterfaceRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Zed/CustomerAccessStorage/Persistence/CustomerAccessStoragePersistenceFactory.php",
        "description": "A `create*Query()` method must look like `return Spy*Query::create();`. `Spryker\\Zed\\CustomerAccessStorage\\Persistence\\CustomerAccessStoragePersistenceFactory::createPropelCustomerAccessQuery()` violates this rule.",
        "rule": "FactoryCreateContainOneNewRule",
        "ruleset": "Spryker",
        "priority": "1"
    }
]
